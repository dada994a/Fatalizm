package we.devs.forever.client.modules.impl.exploit;

import net.minecraft.block.Block;
import net.minecraft.block.BlockAir;
import net.minecraft.block.BlockLiquid;
import net.minecraft.block.state.IBlockState;
import net.minecraft.client.gui.inventory.GuiInventory;
import net.minecraft.init.Items;
import net.minecraft.inventory.ClickType;
import net.minecraft.item.ItemStack;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.SPacketCloseWindow;
import net.minecraft.network.play.server.SPacketEntityMetadata;
import net.minecraft.network.play.server.SPacketHeldItemChange;
import net.minecraft.network.play.server.SPacketSetSlot;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec3d;
import net.minecraftforge.client.event.GuiOpenEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import we.devs.forever.api.event.events.network.PacketEvent;
import we.devs.forever.api.event.eventsys.annotated.handler.annotation.EventListener;
import we.devs.forever.api.event.eventsys.handler.ListenerPriority;
import we.devs.forever.api.util.client.TimerUtil;
import we.devs.forever.client.modules.api.Module;
import we.devs.forever.client.setting.Setting;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class Bypass extends Module {
    private static Bypass instance;
    private final TimerUtil timer = new TimerUtil();
    private final TimerUtil swingTimer = new TimerUtil();
    public Setting<Boolean> boatPlace = (new Setting<>("BoatPlace", false, "Allows you to put the boat around fixes"));
    public Setting<Boolean> noServerSwapSlot = (new Setting<>("NoServerSwapSlot", false, "Prevents the server from swapping slots"));
    public Setting<Boolean> cooldownBypass = (new Setting<>("PearlCooldownBypass", false));
    public Setting<Boolean> illegals = (new Setting<>("Illegals", false));
    public Setting<Boolean> secretClose = (new Setting<>("SecretClose", false, v -> this.illegals.getValue()));
    public Setting<Boolean> rotation = (new Setting<>("Rotation", false, v -> this.secretClose.getValue() && this.illegals.getValue()));
    public Setting<Boolean> elytra = (new Setting<>("Elytra", false));
    public Setting<Boolean> reopen = (new Setting<>("Reopen", false, v -> this.elytra.getValue()));
    public Setting<Integer> reopen_interval = (new Setting<>("ReopenDelay", 1000, 0, 5000, v -> this.elytra.getValue()));
    public Setting<Integer> delay = (new Setting<>("Delay", 0, 0, 1000, v -> this.elytra.getValue()));
    public Setting<Boolean> allow_ghost = (new Setting<>("Ghost", true, v -> this.elytra.getValue()));
    public Setting<Boolean> cancel_close = (new Setting<>("Cancel", true, v -> this.elytra.getValue()));
    public Setting<Boolean> discreet = (new Setting<>("Secret", true, v -> this.elytra.getValue()));
    public Setting<Boolean> packets = (new Setting<>("Packets", false));
    public Setting<Boolean> limitSwing = (new Setting<>("LimitSwing", false, v -> this.packets.getValue()));
    public Setting<Integer> swingPackets = (new Setting<>("SwingPackets", 1, 0, 100, v -> this.packets.getValue()));
    //   public Setting<Boolean> noLimit = (new Setting<>("NoCompression", false, v -> this.packets.getValue()));
    int cooldown = 0;
    private float yaw;
    private float pitch;
    private boolean rotate;
    private BlockPos pos;
    private int swingPacket = 0;

    public Bypass() {
        super("Bypass", "Bypass for stuff", Category.EXPLOIT);
        instance = this;
    }

    @Override
    public void onToggle() {
        this.swingPacket = 0;
    }

    @SubscribeEvent
    public void onGuiOpen(GuiOpenEvent event) {
        if (event.getGui() == null && this.secretClose.getValue() && this.rotation.getValue()) {
            this.pos = new BlockPos(Bypass.mc.player.getPositionVector());
            this.yaw = Bypass.mc.player.rotationYaw;
            this.pitch = Bypass.mc.player.rotationPitch;
            this.rotate = true;
        }
    }

    @EventListener(priority = ListenerPriority.LOWEST)
    public void onPacketSend(PacketEvent.Send event) {
        if (this.illegals.getValue() && this.secretClose.getValue()) {
            if (event.getPacket() instanceof CPacketCloseWindow) {
                event.cancel();
            } else if (event.getPacket() instanceof CPacketPlayer && this.rotation.getValue() && this.rotate) {
                CPacketPlayer packet = event.getPacket();
                packet.yaw = this.yaw;
                packet.pitch = this.pitch;
            }
        }
        if (this.packets.getValue() && this.limitSwing.getValue() && event.getPacket() instanceof CPacketAnimation) {
            if (this.swingPacket > this.swingPackets.getValue()) {
                event.cancel();
            }
            ++this.swingPacket;
        }
        if (this.boatPlace.getValue()) {
            if (event.getPacket() instanceof CPacketPlayerTryUseItemOnBlock) {
                if (mc.player.getHeldItemMainhand().getItem() == Items.BOAT) {
                    event.cancel();
                }
            }
        }
    }

    @EventListener
    public void onIncomingPacket(PacketEvent.Receive event) {
        if (!Bypass.fullNullCheck() && this.elytra.getValue()) {
            SPacketEntityMetadata MetadataPacket;
            if (event.getPacket() instanceof SPacketSetSlot) {
                SPacketSetSlot packet = event.getPacket();
                if (packet.getSlot() == 6) {
                    event.cancel();
                }
                if (!this.allow_ghost.getValue() && packet.getStack().getItem().equals(Items.ELYTRA)) {
                    event.cancel();
                }
            }
            if (this.cancel_close.getValue() && Bypass.mc.player.isElytraFlying() && event.getPacket() instanceof SPacketEntityMetadata && (MetadataPacket = event.getPacket()).getEntityId() == Bypass.mc.player.getEntityId()) {
                event.cancel();
            }
        }
        if (event.getPacket() instanceof SPacketCloseWindow) {
            this.rotate = false;
        }
    }

    @EventListener
    public void onPacketReceive(PacketEvent.Receive event) {
        if (noServerSwapSlot.getValue() && !fullNullCheck()) {
            if (event.getPacket() instanceof SPacketHeldItemChange) {
                event.setCanceled(true);
                mc.player.connection.sendPacket(new CPacketHeldItemChange(mc.player.inventory.currentItem));
            }
        }
    }

    @Override
    public void onTick() {
        if (this.secretClose.getValue() && this.rotation.getValue() && this.rotate && this.pos != null && Bypass.mc.player != null && Bypass.mc.player.getDistanceSq(this.pos) > 400.0) {
            this.rotate = false;
        }
        if (this.elytra.getValue()) {
            if (this.cooldown > 0) {
                --this.cooldown;
            } else if (!(Bypass.mc.player == null || Bypass.mc.currentScreen instanceof GuiInventory || Bypass.mc.player.onGround && this.discreet.getValue())) {
                for (int i = 0; i < 36; ++i) {
                    ItemStack item = Bypass.mc.player.inventory.getStackInSlot(i);
                    if (!item.getItem().equals(Items.ELYTRA)) continue;
                    Bypass.mc.playerController.windowClick(0, i < 9 ? i + 36 : i, 0, ClickType.QUICK_MOVE, Bypass.mc.player);
                    this.cooldown = this.delay.getValue();
                    return;
                }
            }
        }
    }

    @Override
    public void onUpdate() {
        this.swingPacket = 0;
        if (this.elytra.getValue() && this.timer.passedMs(this.reopen_interval.getValue()) && this.reopen.getValue() && !Bypass.mc.player.isElytraFlying() && Bypass.mc.player.fallDistance > 0.0f) {
            Bypass.mc.player.connection.sendPacket(new CPacketEntityAction(Bypass.mc.player, CPacketEntityAction.Action.START_FALL_FLYING));
        }
    }
    public static void Method2822(BlockPos blockPos) {
        IBlockState iBlockState = mc.world.getBlockState(blockPos);
        Block block = iBlockState.getBlock();
        if (!(block instanceof BlockAir) && !(block instanceof BlockLiquid)) {
            return;
        }
        EnumFacing enumFacing = Method3862(blockPos);
        if (enumFacing == null) return;
        BlockPos blockPos2 = blockPos.offset(enumFacing);
        EnumFacing enumFacing3 = enumFacing.getOpposite();
        Vec3d vec3d = new Vec3d(blockPos2).add(0.5, 0.5, 0.5);
        Vec3d vec3d2 = vec3d.add(new Vec3d(enumFacing3.getDirectionVec()).scale(0.5));
        if (!mc.player.isSneaking()) {
            mc.player.connection.sendPacket(new CPacketEntityAction(mc.player, CPacketEntityAction.Action.START_SNEAKING));
            mc.player.setSneaking(true);
        }
        Method3852(blockPos2, vec3d2, EnumHand.MAIN_HAND, enumFacing3, true);
        mc.player.swingArm(EnumHand.MAIN_HAND);
        //-1251036016
        mc.rightClickDelayTimer = 4;
        mc.player.connection.sendPacket(new CPacketEntityAction(mc.player, CPacketEntityAction.Action.STOP_SNEAKING));
        mc.player.setSneaking(true);
    }
    public static void Method3852(BlockPos blockPos, Vec3d vec3d, EnumHand enumHand, EnumFacing enumFacing, boolean bl) {
        if (bl) {
            float f = (float) (vec3d.x - (double) blockPos.getX());
            float f2 = (float) (vec3d.y - (double) blockPos.getY());
            float f3 = (float) (vec3d.z - (double) blockPos.getZ());
            mc.player.connection.sendPacket(new CPacketPlayerTryUseItemOnBlock(blockPos, enumFacing, enumHand, f, f2, f3));
        } else {
            mc.playerController.processRightClickBlock(mc.player, mc.world, blockPos, enumFacing, vec3d, enumHand);
        }
        mc.player.swingArm(EnumHand.MAIN_HAND);
        mc.rightClickDelayTimer = 4;
    }

    public static EnumFacing Method3862(BlockPos blockPos) {
        Iterator<EnumFacing> iterator = Method3864(blockPos).iterator();
        if (!iterator.hasNext()) return null;
        return iterator.next();
    }

    public static List<EnumFacing> Method3864(BlockPos blockPos) {
        ArrayList<EnumFacing> arrayList = new ArrayList<>();
        if (mc.world == null) return arrayList;
        if (blockPos == null) {
            return arrayList;
        }
        EnumFacing[] enumFacingArray = EnumFacing.values();
        int n = enumFacingArray.length;
        int n2 = 0;
        while (n2 < n) {
            EnumFacing enumFacing = enumFacingArray[n2];
            BlockPos blockPos2 = blockPos.offset(enumFacing);
            IBlockState iBlockState = mc.world.getBlockState(blockPos2);
            if (iBlockState.getBlock().canCollideCheck(iBlockState, false) && !iBlockState.getMaterial().isReplaceable()) {
                arrayList.add(enumFacing);
            }
            ++n2;
        }
        return arrayList;
    }
}

