package we.devs.forever.client.modules.impl.exploit;

import net.minecraft.client.gui.GuiDownloadTerrain;
import net.minecraft.init.Items;
import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.server.SPacketPlayerPosLook;
import net.minecraft.util.math.BlockPos;
import we.devs.forever.api.event.events.network.PacketEvent;
import we.devs.forever.api.event.events.player.ItemUsedEvent;
import we.devs.forever.api.event.events.render.Render3DEvent;
import we.devs.forever.api.event.eventsys.annotated.handler.annotation.EventListener;
import we.devs.forever.api.util.player.inventory.InventoryUtil;
import we.devs.forever.api.util.render.RenderUtil;
import we.devs.forever.api.util.render.entity.RenderPlayer;
import we.devs.forever.client.modules.api.Module;
import we.devs.forever.client.setting.Setting;
import we.devs.forever.client.ui.foreverClientGui.components.items.buttons.ColorPickerButton;

import java.awt.*;

public class ChorusControl extends Module {
    public final Setting<Render> render = (new Setting<>("Render", Render.Player));
    private final Setting<Boolean> staticc = (new Setting<>("Static", true, v -> render.getValue() == Render.Player));
    private final Setting<Float> lineWidth = (new Setting<>("LineWidth", 1.0f, 0.1f, 5.0f));
    public Setting<Color> outlineColor = (new Setting<>("OutlineColor", new Color(218, 6, 248, 255), ColorPickerButton.Mode.Normal, 100));
    public Setting<Color> boxColor = (new Setting<>("BoxColor", new Color(21, 107, 183, 255), ColorPickerButton.Mode.Normal, 100));
    private boolean hasEaten = false;
    private SPacketPlayerPosLook packet;
    public ChorusControl() {
        super("ChorusControl", "Allows you to control when your chorus teleports you.", Category.EXPLOIT);
    }

    @Override
    public void onUpdate() {
        if (mc.player.inPortal || InventoryUtil.getItemFromHotbar(Items.CHORUS_FRUIT) == -1 || mc.currentScreen instanceof GuiDownloadTerrain || fullNullCheck())
            return;
        if (mc.player.isDead || mc.player.getHealth() <= 0.0) {
            hasEaten = false;
            packet = null;
        }

        if (hasEaten && mc.gameSettings.keyBindSneak.isKeyDown()) {
            packet = null;
            hasEaten = false;
        }

        if (packet != null && !hasEaten) {
            mc.player.connection.handlePlayerPosLook(packet);
            packet = null;
            hasEaten = false;
        }
    }

    @EventListener
    public void onPacket(PacketEvent.Receive event) {
        if (fullNullCheck() || InventoryUtil.getItemFromHotbar(Items.CHORUS_FRUIT) == -1 || mc.player.inPortal || mc.currentScreen instanceof GuiDownloadTerrain)
            return;
        if (event.getPacket() instanceof SPacketPlayerPosLook) {
            packet = event.getPacket();
            event.cancel();
        }

    }

    @EventListener
    public void onPacketSend(PacketEvent.Send event) {
        if (fullNullCheck() || InventoryUtil.getItemFromHotbar(Items.CHORUS_FRUIT) == -1 || mc.player.inPortal || mc.currentScreen instanceof GuiDownloadTerrain)
            return;
        if (event.getPacket() instanceof CPacketPlayer || event.getPacket() instanceof CPacketConfirmTeleport) {
            event.setCanceled(hasEaten);
        }
    }

    @Override
    public void onRender3D(Render3DEvent event) {
        if (fullNullCheck() || InventoryUtil.getItemFromHotbar(Items.CHORUS_FRUIT) == -1 || mc.player.inPortal || mc.currentScreen instanceof GuiDownloadTerrain)
            return;
        if (packet == null || !hasEaten) return;
        BlockPos posToRender = new BlockPos(packet.getX(), packet.getY(), packet.getZ());
        if (render.getValue().equals(Render.Block)) {
            RenderUtil.drawBox(RenderUtil.generateBB(posToRender), 184 / 255f, 15 / 255f, 10 / 255f, 75 / 255f);
        } else if (render.getValue().equals(Render.Player)) {
            RenderPlayer.renderPlayer(  mc.player,new double[]{packet.x, packet.y, packet.z},
                    boxColor.getColor(),
                    outlineColor.getColor(),
                    lineWidth.getValue());
        }
    }


    @EventListener
    public void onEat(ItemUsedEvent event) {
        if (fullNullCheck() || mc.player.inPortal || mc.currentScreen instanceof GuiDownloadTerrain) return;
        if (event.getEntityLiving().equals(mc.player) && event.getStack().getItem().equals(Items.CHORUS_FRUIT)) {
            hasEaten = true;
        }
    }

    @Override
    public void onDisable() {
        packet = null;
        hasEaten = false;
    }


    public enum Render {
        Player, Block, None
    }
}


