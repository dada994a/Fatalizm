package we.devs.forever.client.modules.impl.exploit;

import net.minecraft.client.model.ModelPlayer;
import net.minecraft.entity.player.EntityPlayer;
import we.devs.forever.api.event.events.player.ChorusEvent;
import we.devs.forever.api.event.events.render.Render3DEvent;
import we.devs.forever.api.event.eventsys.annotated.handler.annotation.EventListener;
import we.devs.forever.api.util.client.TimerUtil;
import we.devs.forever.api.util.render.entity.RenderPlayer;
import we.devs.forever.client.modules.api.Module;
import we.devs.forever.client.setting.Setting;
import we.devs.forever.client.ui.foreverClientGui.components.items.buttons.ColorPickerButton;

import java.awt.*;

public class ChorusTracker extends Module {
    private final Setting<Integer> time = (new Setting<>("Duration", 10, 1, 100));
    private final Setting<Boolean> staticc = (new Setting<>("Static", true));
    private final Setting<Float> lineWidth = (new Setting<>("LineWidth", 1.0f, 0.1f, 5.0f));
    //    private final Setting<Float> testPitchNet = (new Setting<>("TestPitchNet", 1.0f, -180F, 180F));
    private final TimerUtil timer = new TimerUtil();
    public Setting<Color> boxColor = (new Setting<>("FullColor", new Color(0, 72, 255, 52), ColorPickerButton.Mode.Normal, 100));
    public Setting<Color> outlineColor = (new Setting<>("OutLineColor", new Color(0, 42, 255, 255), ColorPickerButton.Mode.Normal, 100));
    EntityPlayer renderTarget;
    private double x;
    private double y;
    private double z;
    private ModelPlayer playerModel;

    public ChorusTracker() {
        super("ChorusTracker", "Renders a chorus sound packet.", Category.EXPLOIT);
    }

    public static EntityPlayer getClosestEnemy() {
        EntityPlayer closestPlayer = null;
        for (EntityPlayer player : mc.world.playerEntities) {
            if (player == mc.player) continue;
            if (friendManager.isFriend(player)) continue;
            if (closestPlayer == null) {
                closestPlayer = player;
            } else if (mc.player.getDistanceSq(player) < mc.player.getDistanceSq(closestPlayer)) {
                closestPlayer = player;
            }
        }
        return closestPlayer;
    }

    @EventListener
    public void onChorus(ChorusEvent event) {
        x = event.getChorusX();
        y = event.getChorusY();
        z = event.getChorusZ();
        renderTarget = getClosestEnemy();

        timer.reset();
    }

    @Override
    public void onRender3D(Render3DEvent render3DEvent) {
        if (timer.passedMs(time.getValue() * 1000) || fullNullCheck()) {
            return;
        }
        RenderPlayer.renderPlayer(  renderTarget,new double[]{x, y, z},
                boxColor.getColor(),
                outlineColor.getColor(),
                lineWidth.getValue());
    }


    public enum RenderMode {
        FOLLOW,
        STATIC,
        RANDOM
    }
}

