package we.devs.forever.client.modules.impl.exploit;

import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.util.math.MathHelper;
import we.devs.forever.api.util.player.PlayerUtil;
import we.devs.forever.client.modules.api.Module;
import we.devs.forever.client.setting.Setting;

public class HitboxCity extends Module {
    private static HitboxCity INSTANCE = new HitboxCity();
    public Setting<Mode> mode = (new Setting<>("Mode", Mode.New));
    private Setting<Integer> timeout = (new Setting<>("Timeout", 5, 1, 10));
    public Setting<Boolean> stepDisable = (new Setting<>("StepDisable", false));
    public Setting<Boolean> burrowDisable = (new Setting<>("BurrowDisable", false));
    protected boolean stepdis = true;
    private int packets;

    public HitboxCity() {
        super("HitboxCity", "Increases your hitbox to city people", Category.EXPLOIT);
    }

    public static HitboxCity getInstance() {
        if (INSTANCE == null) {
            INSTANCE = new HitboxCity();
        }
        return INSTANCE;
    }

    @Override
    public void onEnable() {
        /*
        if (stepDisable.getValue() && Step.INSTANCE.isEnabled()) {
            Step.INSTANCE.disable();
            stepdis = false;
        }
         */
        packets = 0;
    }

    @Override
    public void onDisable() {
        /*
        if (stepDisable.getValue() && !stepdis && !Step.INSTANCE.isEnabled()) {
            Step.INSTANCE.enable();
            stepdis = true;
        }
         */
        packets = 0;
    }

    @Override
    public void onUpdate() {
        switch (mode.getValue()) {
            case New:
                if (PlayerUtil.isMoving()) {
                    mc.player.motionX = 0;
                    mc.player.motionZ= 0;
                    mc.player.moveStrafing = 0F;
                    mc.player.moveForward = 0F;
        }
                if (mc.world.getCollisionBoxes(mc.player, mc.player.getEntityBoundingBox().grow(0.01, 0, 0.01)).size() < 2) {
                    mc.player.setPosition(roundToClosest(mc.player.posX, Math.floor(mc.player.posX) + 0.301, Math.floor(mc.player.posX) + 0.699), mc.player.posY, roundToClosest(mc.player.posZ, Math.floor(mc.player.posZ) + 0.301, Math.floor(mc.player.posZ) + 0.699));
                    packets = 0;

                } else if (mc.player.ticksExisted % timeout.getValue() == 0) {
                    mc.player.setPosition(mc.player.posX + MathHelper.clamp(roundToClosest(mc.player.posX, Math.floor(mc.player.posX) + 0.241, Math.floor(mc.player.posX) + 0.759) - mc.player.posX, -0.03, 0.03), mc.player.posY, mc.player.posZ + MathHelper.clamp(roundToClosest(mc.player.posZ, Math.floor(mc.player.posZ) + 0.241, Math.floor(mc.player.posZ) + 0.759) - mc.player.posZ, -0.03, 0.03));
                    mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY, mc.player.posZ, true));
                    mc.player.connection.sendPacket(new CPacketPlayer.Position(roundToClosest(mc.player.posX, Math.floor(mc.player.posX) + 0.23, Math.floor(mc.player.posX) + 0.77), mc.player.posY, roundToClosest(mc.player.posZ, Math.floor(mc.player.posZ) + 0.23, Math.floor(mc.player.posZ) + 0.77), true));
                    packets++;
                }
                break;
            case Old:
                if (mc.player.collidedHorizontally) {
                    double rad = Math.toRadians(mc.player.rotationYaw);

                    double x = mc.player.posX + (5.6F / 100 * -Math.sin(rad));
                    double z = mc.player.posZ + (5.6F / 100 * Math.cos(rad));

                    mc.player.connection.sendPacket(new CPacketPlayer.Position(x, mc.player.posY, z, true));
                    mc.player.setPosition(x, mc.player.posY, z);
                }
                break;
        }

    }

    private void setInstance() {
        INSTANCE = this;
    }

    private double roundToClosest(double num, double low, double high) {
        double d1 = num - low;
        double d2 = high - num;

        if (d2 > d1) {
            return low;

        } else {
            return high;
        }
    }

    public enum Mode {
        New,
        Old
    }
}

