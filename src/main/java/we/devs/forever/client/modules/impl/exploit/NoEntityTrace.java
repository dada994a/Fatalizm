package we.devs.forever.client.modules.impl.exploit;

import net.minecraft.entity.Entity;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.item.Item;
import net.minecraft.item.ItemBlock;
import net.minecraft.item.ItemPickaxe;
import net.minecraft.network.play.client.CPacketUseEntity;
import we.devs.forever.api.event.events.network.PacketEvent;
import we.devs.forever.api.event.eventsys.annotated.handler.annotation.EventListener;
import we.devs.forever.client.modules.api.Module;
import we.devs.forever.client.setting.Setting;

public class NoEntityTrace
        extends Module {
    private static NoEntityTrace INSTANCE = new NoEntityTrace();
    public Setting<Boolean> noFriendAttack = (new Setting<>("NoFriendAttack", true));
    public Setting<Boolean> pick = (new Setting<>("Pick", true));
    public Setting<Boolean> gap = (new Setting<>("Gap", false));
    public Setting<Boolean> crystal = (new Setting<>("Crystal", false));
    public Setting<Boolean> experienceBottle = (new Setting<>("EXP", false));
    public Setting<Boolean> obby = (new Setting<>("Obby", false));
    public boolean noTrace;

    public NoEntityTrace() {
        super("NoEntityTrace", "Mine through entities.", Category.EXPLOIT);
        this.setInstance();
    }

    public static NoEntityTrace getInstance() {
        if (INSTANCE == null) {
            INSTANCE = new NoEntityTrace();
        }
        return INSTANCE;
    }

    private void setInstance() {
        INSTANCE = this;
    }

    @Override
    public void onUpdate() {
        Item item = NoEntityTrace.mc.player.getHeldItemMainhand().getItem();
        if (item instanceof ItemPickaxe && this.pick.getValue()) {
            this.noTrace = true;
            return;
        }
        if (item == Items.GOLDEN_APPLE && this.gap.getValue()) {
            this.noTrace = true;
            return;
        }
        if (item == Items.END_CRYSTAL && this.crystal.getValue()) {
            this.noTrace = true;
            return;
        }
        if (item == Items.EXPERIENCE_BOTTLE && this.experienceBottle.getValue()) {
            this.noTrace = true;
            return;
        }
        if (item instanceof ItemBlock) {
            this.noTrace = ((ItemBlock) item).getBlock() == Blocks.OBSIDIAN && this.obby.getValue();
            return;
        }
        this.noTrace = false;
    }

    @EventListener
    public void onPacketSend(PacketEvent.Send event) {
        Entity entity;
        if (NoEntityTrace.fullNullCheck()) {
            return;
        }
        if (this.noFriendAttack.getValue() && event.getPacket() instanceof CPacketUseEntity && (entity = ((CPacketUseEntity) event.getPacket()).getEntityFromWorld(NoEntityTrace.mc.world)) != null && friendManager.isFriend(entity.getName())) {
            event.cancel();
        }
    }
}

