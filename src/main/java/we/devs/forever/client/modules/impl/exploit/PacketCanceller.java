package we.devs.forever.client.modules.impl.exploit;


import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.*;
import we.devs.forever.api.event.events.network.PacketEvent;
import we.devs.forever.api.event.eventsys.annotated.handler.annotation.EventListener;
import we.devs.forever.client.modules.api.Module;
import we.devs.forever.client.setting.Setting;

public class PacketCanceller
        extends Module {
    private final Setting<Mode> mode = (new Setting<Mode>("Packets", Mode.Client));
    private final Setting<Integer> page = (new Setting<>("SPackets", 1, 1, 10, v -> mode.getValue() == Mode.Server));
    private final Setting<Boolean> AdvancementInfo = (new Setting<>("AdvancementInfo", false, v -> mode.getValue() == Mode.Server && page.getValue() == 1));
    private final Setting<Boolean> Animation = (new Setting<>("Animation", false, v -> mode.getValue() == Mode.Server && page.getValue() == 1));
    private final Setting<Boolean> BlockAction = (new Setting<>("BlockAction", false, v -> mode.getValue() == Mode.Server && page.getValue() == 1));
    private final Setting<Boolean> BlockBreakAnim = (new Setting<>("BlockBreakAnim", false, v -> mode.getValue() == Mode.Server && page.getValue() == 1));
    private final Setting<Boolean> BlockChange = (new Setting<>("BlockChange", false, v -> mode.getValue() == Mode.Server && page.getValue() == 1));
    private final Setting<Boolean> Camera = (new Setting<>("Camera", false, v -> mode.getValue() == Mode.Server && page.getValue() == 1));
    private final Setting<Boolean> ChangeGameState = (new Setting<>("ChangeGameState", false, v -> mode.getValue() == Mode.Server && page.getValue() == 1));
    private final Setting<Boolean> Chat = (new Setting<>("Chat", false, v -> mode.getValue() == Mode.Server && page.getValue() == 1));
    private final Setting<Boolean> ChunkData = (new Setting<>("ChunkData", false, v -> mode.getValue() == Mode.Server && page.getValue() == 2));
    private final Setting<Boolean> CloseWindow = (new Setting<>("CloseWindow", false, v -> mode.getValue() == Mode.Server && page.getValue() == 2));
    private final Setting<Boolean> CollectItem = (new Setting<>("CollectItem", false, v -> mode.getValue() == Mode.Server && page.getValue() == 2));
    private final Setting<Boolean> CombatEvent = (new Setting<>("Combatevent", false, v -> mode.getValue() == Mode.Server && page.getValue() == 2));
    private final Setting<Boolean> ConfirmTransaction = (new Setting<>("ConfirmTransaction", false, v -> mode.getValue() == Mode.Server && page.getValue() == 2));
    private final Setting<Boolean> Cooldown = (new Setting<>("Cooldown", false, v -> mode.getValue() == Mode.Server && page.getValue() == 2));
    private final Setting<Boolean> CustomPayload = (new Setting<>("CustomPayload", false, v -> mode.getValue() == Mode.Server && page.getValue() == 2));
    private final Setting<Boolean> CustomSound = (new Setting<>("CustomSound", false, v -> mode.getValue() == Mode.Server && page.getValue() == 2));
    private final Setting<Boolean> DestroyEntities = (new Setting<>("DestroyEntities", false, v -> mode.getValue() == Mode.Server && page.getValue() == 3));
    private final Setting<Boolean> Disconnect = (new Setting<>("Disconnect", false, v -> mode.getValue() == Mode.Server && page.getValue() == 3));
    private final Setting<Boolean> DisplayObjective = (new Setting<>("DisplayObjective", false, v -> mode.getValue() == Mode.Server && page.getValue() == 3));
    private final Setting<Boolean> Effect = (new Setting<>("Effect", false, v -> mode.getValue() == Mode.Server && page.getValue() == 3));
    private final Setting<Boolean> Entity = (new Setting<>("Entity", false, v -> mode.getValue() == Mode.Server && page.getValue() == 3));
    private final Setting<Boolean> EntityAttach = (new Setting<>("EntityAttach", false, v -> mode.getValue() == Mode.Server && page.getValue() == 3));
    private final Setting<Boolean> EntityEffect = (new Setting<>("EntityEffect", false, v -> mode.getValue() == Mode.Server && page.getValue() == 3));
    private final Setting<Boolean> EntityEquipment = (new Setting<>("EntityEquipment", false, v -> mode.getValue() == Mode.Server && page.getValue() == 3));
    private final Setting<Boolean> EntityHeadLook = (new Setting<>("EntityHeadLook", false, v -> mode.getValue() == Mode.Server && page.getValue() == 4));
    private final Setting<Boolean> EntityMetadata = (new Setting<>("EntityMetadata", false, v -> mode.getValue() == Mode.Server && page.getValue() == 4));
    private final Setting<Boolean> EntityProperties = (new Setting<>("EntityProperties", false, v -> mode.getValue() == Mode.Server && page.getValue() == 4));
    private final Setting<Boolean> EntityStatus = (new Setting<>("EntityStatus", false, v -> mode.getValue() == Mode.Server && page.getValue() == 4));
    private final Setting<Boolean> EntityTeleport = (new Setting<>("EntityTeleport", false, v -> mode.getValue() == Mode.Server && page.getValue() == 4));
    private final Setting<Boolean> EntityVelocity = (new Setting<>("EntityVelocity", false, v -> mode.getValue() == Mode.Server && page.getValue() == 4));
    private final Setting<Boolean> Explosion = (new Setting<>("Explosion", false, v -> mode.getValue() == Mode.Server && page.getValue() == 4));
    private final Setting<Boolean> HeldItemChange = (new Setting<>("HeldItemChange", false, v -> mode.getValue() == Mode.Server && page.getValue() == 4));
    private final Setting<Boolean> JoinGame = (new Setting<>("JoinGame", false, v -> mode.getValue() == Mode.Server && page.getValue() == 5));
    private final Setting<Boolean> KeepAlive = (new Setting<>("KeepAlive", false, v -> mode.getValue() == Mode.Server && page.getValue() == 5));
    private final Setting<Boolean> Maps = (new Setting<>("Maps", false, v -> mode.getValue() == Mode.Server && page.getValue() == 5));
    private final Setting<Boolean> MoveVehicle = (new Setting<>("MoveVehicle", false, v -> mode.getValue() == Mode.Server && page.getValue() == 5));
    private final Setting<Boolean> MultiBlockChange = (new Setting<>("MultiBlockChange", false, v -> mode.getValue() == Mode.Server && page.getValue() == 5));
    private final Setting<Boolean> OpenWindow = (new Setting<>("OpenWindow", false, v -> mode.getValue() == Mode.Server && page.getValue() == 5));
    private final Setting<Boolean> Particles = (new Setting<>("Particles", false, v -> mode.getValue() == Mode.Server && page.getValue() == 5));
    private final Setting<Boolean> PlaceGhostRecipe = (new Setting<>("PlaceGhostRecipe", false, v -> mode.getValue() == Mode.Server && page.getValue() == 5));
    private final Setting<Boolean> PlayerAbilities = (new Setting<>("PlayerAbilities", false, v -> mode.getValue() == Mode.Server && page.getValue() == 6));
    private final Setting<Boolean> PlayerListHeaderFooter = (new Setting<>("PlayerListHeaderFooter", false, v -> mode.getValue() == Mode.Server && page.getValue() == 6));
    private final Setting<Boolean> PlayerListItem = (new Setting<>("PlayerListItem", false, v -> mode.getValue() == Mode.Server && page.getValue() == 6));
    private final Setting<Boolean> PlayerPosLook = (new Setting<>("PlayerPosLook", false, v -> mode.getValue() == Mode.Server && page.getValue() == 6));
    private final Setting<Boolean> RecipeBook = (new Setting<>("RecipeBook", false, v -> mode.getValue() == Mode.Server && page.getValue() == 6));
    private final Setting<Boolean> RemoveEntityEffect = (new Setting<>("RemoveEntityEffect", false, v -> mode.getValue() == Mode.Server && page.getValue() == 6));
    private final Setting<Boolean> ResourcePackSend = (new Setting<>("ResourcePackSend", false, v -> mode.getValue() == Mode.Server && page.getValue() == 6));
    private final Setting<Boolean> Respawn = (new Setting<>("Respawn", false, v -> mode.getValue() == Mode.Server && page.getValue() == 6));
    private final Setting<Boolean> ScoreboardObjective = (new Setting<>("ScoreboardObjective", false, v -> mode.getValue() == Mode.Server && page.getValue() == 7));
    private final Setting<Boolean> SelectAdvancementsTab = (new Setting<>("SelectAdvancementsTab", false, v -> mode.getValue() == Mode.Server && page.getValue() == 7));
    private final Setting<Boolean> ServerDifficulty = (new Setting<>("ServerDifficulty", false, v -> mode.getValue() == Mode.Server && page.getValue() == 7));
    private final Setting<Boolean> SetExperience = (new Setting<>("SetExperience", false, v -> mode.getValue() == Mode.Server && page.getValue() == 7));
    private final Setting<Boolean> SetPassengers = (new Setting<>("SetPassengers", false, v -> mode.getValue() == Mode.Server && page.getValue() == 7));
    private final Setting<Boolean> SetSlot = (new Setting<>("SetSlot", false, v -> mode.getValue() == Mode.Server && page.getValue() == 7));
    private final Setting<Boolean> SignEditorOpen = (new Setting<>("SignEditorOpen", false, v -> mode.getValue() == Mode.Server && page.getValue() == 7));
    private final Setting<Boolean> SoundEffect = (new Setting<>("SoundEffect", false, v -> mode.getValue() == Mode.Server && page.getValue() == 7));
    private final Setting<Boolean> SpawnExperienceOrb = (new Setting<>("SpawnExperienceOrb", false, v -> mode.getValue() == Mode.Server && page.getValue() == 8));
    private final Setting<Boolean> SpawnGlobalEntity = (new Setting<>("SpawnGlobalEntity", false, v -> mode.getValue() == Mode.Server && page.getValue() == 8));
    private final Setting<Boolean> SpawnMob = (new Setting<>("SpawnMob", false, v -> mode.getValue() == Mode.Server && page.getValue() == 8));
    private final Setting<Boolean> SpawnObject = (new Setting<>("SpawnObject", false, v -> mode.getValue() == Mode.Server && page.getValue() == 8));
    private final Setting<Boolean> SpawnPainting = (new Setting<>("SpawnPainting", false, v -> mode.getValue() == Mode.Server && page.getValue() == 8));
    private final Setting<Boolean> SpawnPlayer = (new Setting<>("SpawnPlayer", false, v -> mode.getValue() == Mode.Server && page.getValue() == 8));
    private final Setting<Boolean> SpawnPosition = (new Setting<>("SpawnPosition", false, v -> mode.getValue() == Mode.Server && page.getValue() == 8));
    private final Setting<Boolean> Statistics = (new Setting<>("Statistics", false, v -> mode.getValue() == Mode.Server && page.getValue() == 8));
    private final Setting<Boolean> TabComplete = (new Setting<>("TabComplete", false, v -> mode.getValue() == Mode.Server && page.getValue() == 9));
    private final Setting<Boolean> Teams = (new Setting<>("Teams", false, v -> mode.getValue() == Mode.Server && page.getValue() == 9));
    private final Setting<Boolean> TimeUpdate = (new Setting<>("TimeUpdate", false, v -> mode.getValue() == Mode.Server && page.getValue() == 9));
    private final Setting<Boolean> Title = (new Setting<>("Title", false, v -> mode.getValue() == Mode.Server && page.getValue() == 9));
    private final Setting<Boolean> UnloadChunk = (new Setting<>("UnloadChunk", false, v -> mode.getValue() == Mode.Server && page.getValue() == 9));
    private final Setting<Boolean> UpdateBossInfo = (new Setting<>("UpdateBossInfo", false, v -> mode.getValue() == Mode.Server && page.getValue() == 9));
    private final Setting<Boolean> UpdateHealth = (new Setting<>("UpdateHealth", false, v -> mode.getValue() == Mode.Server && page.getValue() == 9));
    private final Setting<Boolean> UpdateScore = (new Setting<>("UpdateScore", false, v -> mode.getValue() == Mode.Server && page.getValue() == 9));
    private final Setting<Boolean> UpdateTileEntity = (new Setting<>("UpdateTileEntity", false, v -> mode.getValue() == Mode.Server && page.getValue() == 10));
    private final Setting<Boolean> UseBed = (new Setting<>("UseBed", false, v -> mode.getValue() == Mode.Server && page.getValue() == 10));
    private final Setting<Boolean> WindowItems = (new Setting<>("WindowItems", false, v -> mode.getValue() == Mode.Server && page.getValue() == 10));
    private final Setting<Boolean> WindowProperty = (new Setting<>("WindowProperty", false, v -> mode.getValue() == Mode.Server && page.getValue() == 10));
    private final Setting<Boolean> WorldBorder = (new Setting<>("WorldBorder", false, v -> mode.getValue() == Mode.Server && page.getValue() == 10));
    private final Setting<Boolean> PlayerDigging = (new Setting<>("PlayerDigging", false, v -> mode.getValue() == Mode.Client && page.getValue() == 3));
    private final Setting<Integer> pages = (new Setting<>("CPackets", 1, 1, 4, v -> mode.getValue() == Mode.Client));
    private final Setting<Boolean> Animations = (new Setting<>("Animations", false, v -> mode.getValue() == Mode.Client && pages.getValue() == 1));
    private final Setting<Boolean> ChatMessage = (new Setting<>("ChatMessage", false, v -> mode.getValue() == Mode.Client && pages.getValue() == 1));
    private final Setting<Boolean> ClickWindow = (new Setting<>("ClickWindow", false, v -> mode.getValue() == Mode.Client && pages.getValue() == 1));
    private final Setting<Boolean> ClientSettings = (new Setting<>("ClientSettings", false, v -> mode.getValue() == Mode.Client && pages.getValue() == 1));
    private final Setting<Boolean> ClientStatus = (new Setting<>("ClientStatus", false, v -> mode.getValue() == Mode.Client && pages.getValue() == 1));
    private final Setting<Boolean> CloseWindows = (new Setting<>("CloseWindows", false, v -> mode.getValue() == Mode.Client && pages.getValue() == 1));
    private final Setting<Boolean> ConfirmTeleport = (new Setting<>("ConfirmTeleport", false, v -> mode.getValue() == Mode.Client && pages.getValue() == 1));
    private final Setting<Boolean> ConfirmTransactions = (new Setting<>("ConfirmTransactions", false, v -> mode.getValue() == Mode.Client && pages.getValue() == 1));
    private final Setting<Boolean> CreativeInventoryAction = (new Setting<>("CreativeInventoryAction", false, v -> mode.getValue() == Mode.Client && pages.getValue() == 2));
    private final Setting<Boolean> CustomPayloads = (new Setting<>("CustomPayloads", false, v -> mode.getValue() == Mode.Client && pages.getValue() == 2));
    private final Setting<Boolean> EnchantItem = (new Setting<>("EnchantItem", false, v -> mode.getValue() == Mode.Client && pages.getValue() == 2));
    private final Setting<Boolean> EntityAction = (new Setting<>("EntityAction", false, v -> mode.getValue() == Mode.Client && pages.getValue() == 2));
    private final Setting<Boolean> HeldItemChanges = (new Setting<>("HeldItemChanges", false, v -> mode.getValue() == Mode.Client && pages.getValue() == 2));
    private final Setting<Boolean> Input = (new Setting<>("Input", false, v -> mode.getValue() == Mode.Client && pages.getValue() == 2));
    private final Setting<Boolean> KeepAlives = (new Setting<>("KeepAlives", false, v -> mode.getValue() == Mode.Client && pages.getValue() == 2));
    private final Setting<Boolean> PlaceRecipe = (new Setting<>("PlaceRecipe", false, v -> mode.getValue() == Mode.Client && pages.getValue() == 2));
    private final Setting<Boolean> Player = (new Setting<>("Player", false, v -> mode.getValue() == Mode.Client && pages.getValue() == 3));
    private final Setting<Boolean> PlayerAbility = (new Setting<>("PlayerAbility", false, v -> mode.getValue() == Mode.Client && pages.getValue() == 3));
    private final Setting<Boolean> PlayerTryUseItem = (new Setting<>("PlayerTryUseItem", false, v -> mode.getValue() == Mode.Client && pages.getValue() == 3));
    private final Setting<Boolean> PlayerTryUseItemOnBlock = (new Setting<>("TryUseItemOnBlock", false, v -> mode.getValue() == Mode.Client && pages.getValue() == 3));
    private final Setting<Boolean> RecipeInfo = (new Setting<>("RecipeInfo", false, v -> mode.getValue() == Mode.Client && pages.getValue() == 3));
    private final Setting<Boolean> ResourcePackStatus = (new Setting<>("ResourcePackStatus", false, v -> mode.getValue() == Mode.Client && pages.getValue() == 3));
    private final Setting<Boolean> SeenAdvancements = (new Setting<>("SeenAdvancements", false, v -> mode.getValue() == Mode.Client && pages.getValue() == 3));
    // private final Setting<Boolean> PlayerPackets = (new Setting<>("PlayerPackets", false, v -> mode.getValue() == Mode.Client && pages.getValue() == 4));
    private final Setting<Boolean> Spectate = (new Setting<>("Spectate", false, v -> mode.getValue() == Mode.Client && pages.getValue() == 4));
    private final Setting<Boolean> SteerBoat = (new Setting<>("SteerBoat", false, v -> mode.getValue() == Mode.Client && pages.getValue() == 4));
    private final Setting<Boolean> TabCompletion = (new Setting<>("TabCompletion", false, v -> mode.getValue() == Mode.Client && pages.getValue() == 4));
    private final Setting<Boolean> UpdateSign = (new Setting<>("UpdateSign", false, v -> mode.getValue() == Mode.Client && pages.getValue() == 4));
    private final Setting<Boolean> UseEntity = (new Setting<>("UseEntity", false, v -> mode.getValue() == Mode.Client && pages.getValue() == 4));
    private final Setting<Boolean> VehicleMove = (new Setting<>("VehicleMove", false, v -> mode.getValue() == Mode.Client && pages.getValue() == 4));
    private int hudAmount;

    public PacketCanceller() {
        super("PacketCanceller", "Blocks Certain Packets for many uses.", Category.EXPLOIT);
    }

    @EventListener
    public void onPacketSend(PacketEvent.Send event) {
        if (!isEnabled()) {
            return;
        }
        if (event.getPacket() instanceof CPacketAnimation && Animations.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof CPacketChatMessage && ChatMessage.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof CPacketClickWindow && ClickWindow.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof CPacketClientSettings && ClientSettings.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof CPacketClientStatus && ClientStatus.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof CPacketCloseWindow && CloseWindows.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof CPacketConfirmTeleport && ConfirmTeleport.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof CPacketConfirmTransaction && ConfirmTransactions.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof CPacketCreativeInventoryAction && CreativeInventoryAction.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof CPacketCustomPayload && CustomPayloads.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof CPacketEnchantItem && EnchantItem.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof CPacketEntityAction && EntityAction.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof CPacketHeldItemChange && HeldItemChanges.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof CPacketInput && Input.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof CPacketKeepAlive && KeepAlives.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof CPacketPlaceRecipe && PlaceRecipe.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof CPacketPlayer && Player.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof CPacketPlayerAbilities && PlayerAbility.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof CPacketPlayerDigging && PlayerDigging.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof CPacketPlayerTryUseItem && PlayerTryUseItem.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof CPacketPlayerTryUseItemOnBlock && PlayerTryUseItemOnBlock.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof CPacketRecipeInfo && RecipeInfo.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof CPacketResourcePackStatus && ResourcePackStatus.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof CPacketSeenAdvancements && SeenAdvancements.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof CPacketSpectate && Spectate.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof CPacketSteerBoat && SteerBoat.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof CPacketTabComplete && TabCompletion.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof CPacketUpdateSign && UpdateSign.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof CPacketUseEntity && UseEntity.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof CPacketVehicleMove && VehicleMove.getValue()) {
            event.cancel();
        }
    }

    @EventListener
    public void onPacketReceive(PacketEvent.Receive event) {
        if (!isEnabled()) {
            return;
        }
        if (event.getPacket() instanceof SPacketAdvancementInfo && AdvancementInfo.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketAnimation && Animation.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketBlockAction && BlockAction.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketBlockBreakAnim && BlockBreakAnim.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketBlockChange && BlockChange.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketCamera && Camera.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketChangeGameState && ChangeGameState.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketChat && Chat.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketChunkData && ChunkData.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketCloseWindow && CloseWindow.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketCollectItem && CollectItem.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketCombatEvent && CombatEvent.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketConfirmTransaction && ConfirmTransaction.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketCooldown && Cooldown.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketCustomPayload && CustomPayload.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketCustomSound && CustomSound.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketDestroyEntities && DestroyEntities.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketDisconnect && Disconnect.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketChunkData && ChunkData.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketCloseWindow && CloseWindow.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketCollectItem && CollectItem.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketDisplayObjective && DisplayObjective.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketEffect && Effect.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketEntity && Entity.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketEntityAttach && EntityAttach.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketEntityEffect && EntityEffect.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketEntityEquipment && EntityEquipment.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketEntityHeadLook && EntityHeadLook.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketEntityMetadata && EntityMetadata.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketEntityProperties && EntityProperties.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketEntityStatus && EntityStatus.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketEntityTeleport && EntityTeleport.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketEntityVelocity && EntityVelocity.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketExplosion && Explosion.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketHeldItemChange && HeldItemChange.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketJoinGame && JoinGame.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketKeepAlive && KeepAlive.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketMaps && Maps.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketMoveVehicle && MoveVehicle.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketMultiBlockChange && MultiBlockChange.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketOpenWindow && OpenWindow.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketParticles && Particles.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketPlaceGhostRecipe && PlaceGhostRecipe.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketPlayerAbilities && PlayerAbilities.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketPlayerListHeaderFooter && PlayerListHeaderFooter.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketPlayerListItem && PlayerListItem.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketPlayerPosLook && PlayerPosLook.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketRecipeBook && RecipeBook.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketRemoveEntityEffect && RemoveEntityEffect.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketResourcePackSend && ResourcePackSend.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketRespawn && Respawn.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketScoreboardObjective && ScoreboardObjective.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketSelectAdvancementsTab && SelectAdvancementsTab.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketServerDifficulty && ServerDifficulty.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketSetExperience && SetExperience.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketSetPassengers && SetPassengers.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketSetSlot && SetSlot.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketSignEditorOpen && SignEditorOpen.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketSoundEffect && SoundEffect.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketSpawnExperienceOrb && SpawnExperienceOrb.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketSpawnGlobalEntity && SpawnGlobalEntity.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketSpawnMob && SpawnMob.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketSpawnObject && SpawnObject.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketSpawnPainting && SpawnPainting.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketSpawnPlayer && SpawnPlayer.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketSpawnPosition && SpawnPosition.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketStatistics && Statistics.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketTabComplete && TabComplete.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketTeams && Teams.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketTimeUpdate && TimeUpdate.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketTitle && Title.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketUnloadChunk && UnloadChunk.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketUpdateBossInfo && UpdateBossInfo.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketUpdateHealth && UpdateHealth.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketUpdateScore && UpdateScore.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketUpdateTileEntity && UpdateTileEntity.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketUseBed && UseBed.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketWindowItems && WindowItems.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketWindowProperty && WindowProperty.getValue()) {
            event.cancel();
        }
        if (event.getPacket() instanceof SPacketWorldBorder && WorldBorder.getValue()) {
            event.cancel();
        }
    }

    @Override
    public void onEnable() {
//        String standart = "\u00a7aAntiPackets On!\u00a7f Cancelled Packets: ";
//        StringBuilder text = new StringBuilder(standart);
//        if (!settings.isEmpty()) {
//            for (Setting setting : settings) {
//                if (!(setting.getValue() instanceof Boolean) || !((Boolean) setting.getValue()).booleanValue() || setting.getName().equalsIgnoreCase("Enabled") || setting.getName().equalsIgnoreCase("drawn"))
//                    continue;
//                String name = setting.getName();
//                text.append(name).append(", ");
//            }
//        }
//        if (text.toString().equals(standart)) {
//            Command.sendMessage("\u00a7aAntiPackets On!\u00a7f Currently not cancelling any Packets.");
//        } else {
//            String output = removeLastChar(removeLastChar(text.toString()));
//            Command.sendMessage(output);
//        }
    }

//    @Override
//    public void onUpdate() {
//        int amount = 0;
//        if (!settings.isEmpty()) {
//            for (Setting setting : settings) {
//                if (!(setting.getValue() instanceof Boolean) || !((Boolean) setting.getValue()).booleanValue() || setting.getName().equalsIgnoreCase("Enabled") || setting.getName().equalsIgnoreCase("drawn"))
//                    continue;
//                ++amount;
//            }
//        }
//        hudAmount = amount;
//    }

//    @Override
//    public String getDisplayInfo() {
//        if (hudAmount == 0) {
//            return "";
//        }
//        return hudAmount + "";
//    }

    public String removeLastChar(String str) {
        if (str != null && str.length() > 0) {
            str = str.substring(0, str.length() - 1);
        }
        return str;
    }

    public enum Mode {
        Client,
        Server
    }
}

